<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycompany.webapp.member.dao.MemberDao">
	
	<resultMap type="com.mycompany.webapp.member.model.MemberVo" id="selectMember">
      <result column="MEMBER_ID" property="memberId"/>
      <result column="MEMBER_NAME" property="memberName"/>
      <result column="MEMBER_PASSWORD" property="memberPassword"/>
      <result column="PHONE_NUMBER" property="phoneNumber"/>
    </resultMap> 
	
	<!-- 유저 선택할 수 있는 쿼리문 -->
	<select id="selectMember" parameterType="string" resultMap="selectMember">
		SELECT
         MEMBER_ID
        , MEMBER_NAME
        , MEMBER_PASSWORD
        , PHONE_NUMBER
        , EMAIL
      FROM
         MEMBER
      WHERE
           MEMBER_ID=#{memberId} AND MEMBER_STATUS='Y'
	</select>
	
	<select id="selectMemberInfo" parameterType="string" resultType="member">
		SELECT MEMBER_ID AS MEMBERID
			  ,MEMBER_NAME AS MEMBERNAME
			  ,MEMBER_PASSWORD AS MEMBERPASSWORD
			  ,PHONE_NUMBER AS PHONENUMBER
			  ,EMAIL AS EMAIL
			  ,FILE_SAVED_NAME AS FILESAVEDNAME
		  FROM MEMBER M 
		  	   LEFT OUTER JOIN 
		  	  (
		  	   SELECT * 
		  	     FROM UPLOAD_FILE 
		  	    WHERE FILE_STATUS='Y'
		  	  )F
		    ON M.MEMBER_ID=F.FILE_CODE
		 WHERE M.MEMBER_ID=#{memberId}
	</select>
	
	<!-- 유저 정보 수정할 수 있는 쿼리문 -->
	<update id="updateMember" parameterType="member">
	 	UPDATE MEMBER
	 	SET
	 		MEMBER_NAME=#{memberName}
	 	  , MEMBER_PASSWORD=#{memberPassword}
	 	  , PHONE_NUMBER=#{phoneNumber}
	 	  , EMAIL=#{email}
	 	  , MODIFIER=#{memberId}
	 	  , MODIFY_DATE=SYSDATE
	 	WHERE
	 		MEMBER_ID=#{memberId} AND MEMBER_STATUS='Y'
	</update>
	
	<!-- 유저 삭제할 수 있는 쿼리문 -->
	<update id="deleteMember" parameterType="member">
		UPDATE MEMBER
		SET
		  	MODIFIER=#{memberId}
		  , MODIFY_DATE=SYSDATE
		  , MEMBER_STATUS='N'
		WHERE
			MEMBER_ID=#{memberId} AND MEMBER_STATUS='Y'
	</update>
	
	<!-- 유저 가입할 수 있는 쿼리문 -->
	<insert id="insertMember" parameterType="member">
		INSERT INTO
			MEMBER (MEMBER_ID
				  , MEMBER_PASSWORD
				  , MEMBER_NAME
				  , EMAIL
				  , PHONE_NUMBER
				  , WRITER
				  , WRITE_DATE
				  , MODIFIER
				  , MODIFY_DATE
				  , MEMBER_STATUS)
			VALUES (#{memberId}
				 , #{memberPassword}
				 , #{memberName}
				 , #{email, jdbcType=VARCHAR}
				 , #{phoneNumber}
				 , NULL
				 , SYSDATE
				 , NULL
				 , NULL
				 , 'Y')
	</insert>
	
	<!-- 유저 비밀번호 조회할 수 있는 쿼리문 -->
	<select id="getPassword" parameterType="string" resultType="string">
		SELECT
			MEMBER_PASSWORD
		FROM
			MEMBER
		WHERE 
			MEMBER_ID=#{memberId} AND MEMBER_STATUS='Y'
	</select>
	
	<select id="checkOverId" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE MEMBER_ID = #{memberId}
	</select>
	
	
	<resultMap type="com.mycompany.webapp.member.model.MemberVo" id="selectTravel">
      <result column="TRAVEL_TITLE" property="travelTitle"/>
      <result column="TRAVEL_START" property="travelStart"/>
      <result column="TRAVEL_END" property="travelEnd"/>
      <result column="VIEW_CNT" property="viewCount"/>
      <result column="SHARE_CNT" property="shareCount"/>
      <result column="DETAIL_CD_NAME" property="categoryName"/>
      <result column="WRITER" property="writer"/>
      <result column="TRAVEL_ID" property="travelId"/>
      <result column="PLACE_NAME" property="placeName"/>
      <result column="PLACE_ID" property="placeId"/>
      <result column="FILE_SAVED_NAME" property="fileSavedName"/>
    </resultMap> 
	
	
	<!-- 유저 여행 일정 조회 쿼리문 -->
	<select id="userTravelList" parameterType="string" resultMap="selectTravel">
		SELECT B.*, Dc.Detail_Cd_Name FROM 
			(SELECT A.* FROM
		        (SELECT ROW_NUMBER() OVER
		        	(PARTITION BY Trv.Travel_Id ORDER BY Trvde.Travel_Date) AS rn
		           , TRV.TRAVEL_TITLE
		           ,TRV.WRITER
		           , TRV.TRAVEL_ID
		           , TRVDE.Place_Id
		           , TRV.TRAVEL_START
		           , TRV.TRAVEL_END
		           , TRV.VIEW_CNT
		           , TRV.SHARE_CNT
		           FROM Travel TRV
		           , TRAVEL_DETAIL TRVDE
		           WHERE  TRV.TRAVEL_ID = Trvde.Travel_Id
		           AND TRV.WRITER = #{memberId}) A
		    	   	   WHERE A.RN = 1 ) B
		    	   	 , PLACE PLC
		    	   	 , DETAIL_CODE DC
		WHERE B.PLACE_ID = PLC.PLACE_ID AND PLC.CATEGORY = DC.DETAIL_CD_ID
	</select>
	
	<select id="userMainTravelList" parameterType="string" resultMap="selectTravel">
		SELECT distinct B.*, PLC.place_name , Dc.Detail_Cd_Name, UF.file_saved_name FROM 
			(SELECT A.* FROM
		        (SELECT ROW_NUMBER() OVER
		        	(PARTITION BY Trv.Travel_Id ORDER BY Trvde.Travel_Date) AS rn
		           , TRV.TRAVEL_TITLE
		           ,TRV.WRITER
		           , TRV.TRAVEL_ID
		           , TRVDE.Place_Id
		           , TRV.TRAVEL_START
		           , TRV.TRAVEL_END
		           , TRV.VIEW_CNT
		           , TRV.SHARE_CNT
		           FROM Travel TRV
		           , TRAVEL_DETAIL TRVDE
                   , PLACE PLC
                   , upload_file UF
		           WHERE  TRV.TRAVEL_ID = Trvde.Travel_Id
                   and Trvde.PLACE_ID = PLC.place_id
                   
		           AND TRV.WRITER = #{memberId}) A
		    	   	   WHERE A.RN = 1 ) B
		    	   	 , DETAIL_CODE DC
                     , PLACE PLC
                     , upload_file UF
		WHERE B.PLACE_ID = PLC.PLACE_ID AND PLC.CATEGORY = DC.DETAIL_CD_ID
        and  UF.file_code = PLC.PLACE_NAME
	</select>
	
	<select id="userTravelCount" parameterType="string" resultType="int">
    SELECT COUNT(CNT) FROM
		  (SELECT A.* 
		     FROM
		        (SELECT ROW_NUMBER() OVER(PARTITION BY Trv.Travel_Id ORDER BY Trvde.Travel_Date) AS rn
                , COUNT(*) OVER (PARTITION BY Trv.Travel_Id) AS CNT
                , TRV.TRAVEL_TITLE,TRVDE.Place_Id, TRV.TRAVEL_START
                , TRV.TRAVEL_END, TRV.VIEW_CNT
                , TRV.SHARE_CNT
		           FROM Travel TRV, TRAVEL_DETAIL TRVDE
		          WHERE  TRV.TRAVEL_ID = Trvde.Travel_Id
		            AND TRV.WRITER = #{memberId}) A
		    WHERE A.RN = 1 ) B, PLACE PLC, DETAIL_CODE DC
		WHERE B.PLACE_ID = PLC.PLACE_ID
		AND   PLC.CATEGORY = DC.DETAIL_CD_ID
	</select>
	
	<!-- 팔로워 수 -->
	<select id="countFollower" parameterType="String" resultType="int">
		SELECT COUNT(*)
          FROM FOLLOW
         WHERE TO_ID=#{memberId} AND FOLLOW_STATUS='Y'
	</select>
	
	<!-- 팔로우 수 -->
	<select id="countFollowing" parameterType="String" resultType="int">
		SELECT COUNT(*)
          FROM FOLLOW
         WHERE FROM_ID=#{memberId} AND FOLLOW_STATUS='Y'
	</select>
	
	<!-- 팔로우 요청 -->
	<insert id="requestFollow" parameterType="map">
		 INSERT INTO FOLLOW(FOLLOW_SEQ
		 				   ,TO_ID
		 				   ,FROM_ID
		 				   ,FOLLOW_DATE
		 				   ,FOLLOW_STATUS)
         VALUES('FOL'||LPAD(FOLLOW_SEQ.NEXTVAL,5,0)
         		,#{memberId}
         		,#{sessionId}
         		,SYSDATE
         		,'N')
	</insert>
	
	<!-- 팔로우 상태 체크 -->
	<select id="checkFollowStatus" parameterType="map" resultType="string">
		SELECT FOLLOW_STATUS
          FROM FOLLOW
         WHERE TO_ID=#{memberId} AND FROM_ID=#{sessionId}
	</select>
	
	<!-- 팔로우상태 n으로 만들기 -->
	<update id="changeFollowStatusN" parameterType="String">
		UPDATE FOLLOW SET FOLLOW_STATUS='N'
		 WHERE FOLLOW_SEQ=#{followSeq}
	</update>
	
	<!-- 알림추가 -->
	<insert id="insertAlarm" parameterType="map">
		INSERT INTO ALARM(ALARM_SEQ
						 ,ALARM_TO_ID
						 ,ALARM_FROM_ID
						 ,ALARM_CODE
						 ,ALARM_STATUS)
        VALUES ('ALA'||LPAD(alarm_seq.nextval,5,0)
        	   ,#{memberId}
        	   ,#{sessionId}
        	   ,#{alarmCode}
        	   ,'Y')
	</insert>	
	
	<!-- 알림 리스트 -->
	<select id="selectAlarms" parameterType="String" resultType="alarm">
		SELECT A.ALARM_SEQ AS alarmSeq
			  ,F.FOLLOW_SEQ AS followSeq
			  ,A.ALARM_TO_ID AS alarmSeq
			  ,A.ALARM_FROM_ID AS alarmFromId
			  ,A.ALARM_STATUS AS alarmStatus
			  ,F.FOLLOW_STATUS AS followStatus
			  ,A.ALARM_CODE AS alarmCode
		  FROM (SELECT ALARM_SEQ
				  	  ,ALARM_TO_ID
				  	  ,ALARM_FROM_ID
				  	  ,ALARM_STATUS
				  	  ,ALARM_CODE 
		  	      FROM ALARM 
		  	     WHERE ALARM_TO_ID=#{sessionId} AND ALARM_STATUS='Y')A 
		  		LEFT OUTER JOIN
		  	   (SELECT TO_ID
		  	   		  ,FROM_ID
		  	   		  ,FOLLOW_SEQ
		  	   		  ,FOLLOW_STATUS 
		  	   	  FROM FOLLOW 
		  	   	 WHERE TO_ID=#{sessionId}) F
            ON A.ALARM_TO_ID=F.TO_ID AND A.ALARM_FROM_ID=F.FROM_ID
      ORDER BY ALARM_SEQ DESC
	</select>
	
	<!-- 팔로워 리스트 -->
	<select id="selectFollowerList" parameterType="String" resultType="member">
		SELECT FROM_ID AS memberId
			  ,FOLLOW_STATUS AS status
			  ,FILE_SAVED_NAME AS fileSavedName
		  FROM FOLLOW 
		  	   LEFT OUTER JOIN 
		  	   (SELECT FILE_SAVED_NAME
		  	   		  ,FILE_CODE
		  	   		  ,FILE_STATUS 
		  	   	  FROM UPLOAD_FILE 
		  	   	 WHERE FILE_STATUS='Y')UPLOAD_FILE
		    ON FOLLOW.FROM_ID=UPLOAD_FILE.FILE_CODE
		 WHERE FOLLOW.TO_ID=#{memberId} AND FOLLOW_STATUS='Y'
	</select>
	
	<!-- 팔로우 리스트 -->
	<select id="selectFollowList" parameterType="String" resultType="member">
		SELECT TO_ID AS memberId
			  ,FOLLOW_STATUS AS status
		      ,FILE_SAVED_NAME AS fileSavedName
		  FROM FOLLOW 
		  	   LEFT OUTER JOIN 
		  	  (SELECT FILE_SAVED_NAME
		  	  		 ,FILE_CODE
		  	  		 ,FILE_STATUS 
		  	     FROM UPLOAD_FILE 
		  	    WHERE FILE_STATUS='Y')UPLOAD_FILE
		   ON FOLLOW.TO_ID=UPLOAD_FILE.FILE_CODE
		WHERE FOLLOW.FROM_ID=#{memberId} AND FOLLOW_STATUS='Y'
	</select>
	
	<!-- 유저 검색 -->
	<select id="searchUser" parameterType="String" resultType="member">
		SELECT MEMBER_ID AS memberId
			  ,FILE_SAVED_NAME AS fileSavedName
		  FROM(SELECT MEMBER_ID
   			     FROM MEMBER
    	        WHERE MEMBER_ID LIKE '%'||#{keyword}||'%')M 
    	       LEFT OUTER JOIN 
    	      (SELECT FILE_CODE
    	       		 ,FILE_SAVED_NAME
    	       		 ,FILE_STATUS 
    	       	 FROM UPLOAD_FILE 
    	       	WHERE FILE_STATUS='Y')F
		   ON M.MEMBER_ID=F.FILE_CODE
		WHERE MEMBER_ID LIKE '%'||#{keyword}||'%'
	</select>
	
	<!-- 팔로워 시퀀스 찾기 -->
	<select id="searchFollowerSeq" parameterType="map" resultType="String">
		SELECT FOLLOW_SEQ
		  FROM FOLLOW
		 WHERE TO_ID=#{sessionId} AND FROM_ID=#{memberId}
	</select>
	
	<!--팔로우 시퀀스 찾기  -->
	<select id="searchFollowSeq" parameterType="map" resultType="String">
		SELECT FOLLOW_SEQ
		  FROM FOLLOW
		 WHERE TO_ID=#{memberId} AND FROM_ID=#{sessionId}
	</select>
	<!-- 팔로우 허용 -->
	<update id="acceptFollow" parameterType="String">
		UPDATE FOLLOW 
		   SET FOLLOW_STATUS='Y'
			  ,FOLLOW_DATE=SYSDATE
		 WHERE FOLLOW_SEQ=#{followSeq}
	</update>
	
	<!-- 팔로우 거절 -->
	<delete id="rejectFollow" parameterType="String">
		DELETE FROM FOLLOW WHERE FOLLOW_SEQ=#{followSeq}
	</delete>
	
	<!-- 알림 상태변경 -->
	<update id="changeStatusN" parameterType="String">
		UPDATE ALARM 
		   SET ALARM_STATUS='N'
		 WHERE ALARM_SEQ=#{alarmSeq}
	</update>
	
	<!-- 팔로우신청취소 -->
	<update id="cancelFollowAlarm" parameterType="map">
		UPDATE ALARM 
		   SET ALARM_STATUS='N'
		 WHERE ALARM_CODE='F' AND ALARM_TO_ID=#{memberId} AND ALARM_FROM_ID=#{sessionId}
	</update>
	
	<!-- 언팔로우하기(팔로우상태==U) -->
	<update id="unFollow" parameterType="String">
		UPDATE FOLLOW 
		   SET FOLLOW_STATUS='U'
			  ,UNFOLLOW_DATE=SYSDATE
		 WHERE FOLLOW_SEQ=#{followSeq}
	</update>
	
	
	<!-- 아이디 찾기 -->
	<select id="findUserId" parameterType="String" resultType="String">
		SELECT MEMBER_ID as memberId
		FROM MEMBER
		WHERE EMAIL = #{email}
		AND MEMBER_NAME = #{userName}
		AND MEMBER_STATUS = 'Y'
	</select>
	
	
	<insert id="insertCheckList" parameterType="map">
		 INSERT INTO CHECK_LIST(CHECK_ID
		 				   ,WRITER
		 				   ,ITEM
		 				   ,ITEM_STATUS
		 				   , WRITE_DATE)
         VALUES ('CHK'||LPAD(CHECK_SEQ.NEXTVAL,5,0)
         		,#{memberId}
         		,#{Item}
         		,'Y'
         		,SYSDATE)
	</insert>
	
	
</mapper>