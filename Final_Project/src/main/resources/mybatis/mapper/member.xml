<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycompany.webapp.member.dao.MemberDao">
	
	<resultMap type="com.mycompany.webapp.member.model.MemberVo" id="selectMember">
      <result column="MEMBER_ID" property="memberId"/>
      <result column="MEMBER_NAME" property="memberName"/>
      <result column="MEMBER_PASSWORD" property="memberPassword"/>
      <result column="PHONE_NUMBER" property="phoneNumber"/>
    </resultMap> 
	
	<!-- 유저 선택할 수 있는 쿼리문 -->
	<select id="selectMember" parameterType="string" resultMap="selectMember">
		SELECT
         MEMBER_ID
        , MEMBER_NAME
        , MEMBER_PASSWORD
        , PHONE_NUMBER
        , EMAIL
      FROM
         MEMBER
      WHERE
           MEMBER_ID=#{memberId} AND MEMBER_STATUS='Y'
	</select>
	
	<select id="selectMemberInfo" parameterType="string" resultType="member">
		select member_id as memberId, member_name as memberName,member_password as memberPassword,phone_number as phoneNumber,email as email,file_saved_name as fileSavedName
		from member m left outer join (select * from upload_file where file_status='Y') f
		on m.member_id=f.file_code
		where m.member_id=#{memberId}
	</select>
	
	<!-- 유저 정보 수정할 수 있는 쿼리문 -->
	<update id="updateMember" parameterType="member">
	 	UPDATE MEMBER
	 	SET
	 		MEMBER_NAME=#{memberName}
	 	  , MEMBER_PASSWORD=#{memberPassword}
	 	  , PHONE_NUMBER=#{phoneNumber}
	 	  , EMAIL=#{email}
	 	  , MODIFIER=#{memberId}
	 	  , MODIFY_DATE=SYSDATE
	 	WHERE
	 		MEMBER_ID=#{memberId} AND MEMBER_STATUS='Y'
	</update>
	
	<!-- 유저 삭제할 수 있는 쿼리문 -->
	<update id="deleteMember" parameterType="member">
		UPDATE MEMBER
		SET
		  	MODIFIER=#{memberId}
		  , MODIFY_DATE=SYSDATE
		  , MEMBER_STATUS='N'
		WHERE
			MEMBER_ID=#{memberId} AND MEMBER_STATUS='Y'
	</update>
	
	<!-- 유저 가입할 수 있는 쿼리문 -->
	<insert id="insertMember" parameterType="member">
		INSERT INTO
			MEMBER (MEMBER_ID
				  , MEMBER_PASSWORD
				  , MEMBER_NAME
				  , EMAIL
				  , PHONE_NUMBER
				  , WRITER
				  , WRITE_DATE
				  , MODIFIER
				  , MODIFY_DATE
				  , MEMBER_STATUS)
			VALUES (#{memberId, jdbcType=VARCHAR}
				 , #{memberPassword, jdbcType=VARCHAR}
				 , #{memberName, jdbcType=VARCHAR}
				 , #{email, jdbcType=VARCHAR}
				 , #{phoneNumber, jdbcType=VARCHAR}
				 , NULL
				 , SYSDATE
				 , NULL
				 , NULL
				 , 'Y')
	</insert>
	
	<!-- 유저 비밀번호 조회할 수 있는 쿼리문 -->
	<select id="getPassword" parameterType="string" resultType="string">
		SELECT
			MEMBER_PASSWORD
		FROM
			MEMBER
		WHERE 
			MEMBER_ID=#{memberId} AND MEMBER_STATUS='Y'
	</select>
	
	<select id="checkOverId" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE MEMBER_ID = #{memberId}
	</select>
	
	
	<resultMap type="com.mycompany.webapp.member.model.MemberVo" id="selectTravel">
      <result column="TRAVEL_TITLE" property="travelTitle"/>
      <result column="TRAVEL_START" property="travelStart"/>
      <result column="TRAVEL_END" property="travelEnd"/>
      <result column="VIEW_CNT" property="viewCount"/>
      <result column="SHARE_CNT" property="shareCount"/>
      <result column="DETAIL_CD_NAME" property="categoryName"/>
      <result column="WRITER" property="writer"/>
      <result column="TRAVEL_ID" property="travelId"/>
    </resultMap> 
	
	
	<!-- 유저 여행 일정 조회 쿼리문 -->
	<select id="userTravelList" parameterType="string" resultMap="selectTravel">
		SELECT B.*, Dc.Detail_Cd_Name FROM
  (SELECT A.* 
     FROM
        (SELECT ROW_NUMBER() OVER(PARTITION BY Trv.Travel_Id ORDER BY Trvde.Travel_Date) AS rn, TRV.TRAVEL_TITLE,TRV.WRITER, TRV.TRAVEL_ID,TRVDE.Place_Id, TRV.TRAVEL_START, TRV.TRAVEL_END, TRV.VIEW_CNT,
           TRV.SHARE_CNT
           FROM Travel TRV, TRAVEL_DETAIL TRVDE
          WHERE  TRV.TRAVEL_ID = Trvde.Travel_Id
            AND TRV.WRITER = #{memberId}) A
    WHERE A.RN = 1 ) B, PLACE PLC, DETAIL_CODE DC
WHERE B.PLACE_ID = PLC.PLACE_ID
AND   PLC.CATEGORY = DC.DETAIL_CD_ID
			  
	</select>
	
	<select id="userTravelCount" parameterType="string" resultType="int">
    SELECT COUNT(CNT) FROM
		  (SELECT A.* 
		     FROM
		        (SELECT ROW_NUMBER() OVER(PARTITION BY Trv.Travel_Id ORDER BY Trvde.Travel_Date) AS rn
                , COUNT(*) OVER (PARTITION BY Trv.Travel_Id) AS CNT
                , TRV.TRAVEL_TITLE,TRVDE.Place_Id, TRV.TRAVEL_START
                , TRV.TRAVEL_END, TRV.VIEW_CNT
                , TRV.SHARE_CNT
		           FROM Travel TRV, TRAVEL_DETAIL TRVDE
		          WHERE  TRV.TRAVEL_ID = Trvde.Travel_Id
		            AND TRV.WRITER = #{memberId}) A
		    WHERE A.RN = 1 ) B, PLACE PLC, DETAIL_CODE DC
		WHERE B.PLACE_ID = PLC.PLACE_ID
		AND   PLC.CATEGORY = DC.DETAIL_CD_ID
	</select>
	
	<!-- 팔로워 수 -->
	<select id="countFollower" parameterType="String" resultType="int">
		select count(*)
        from follow
        where to_id=#{memberId} and follow_status='Y'
	</select>
	
	<!-- 팔로우 수 -->
	<select id="countFollowing" parameterType="String" resultType="int">
		select count(*)
        from follow
        where from_id=#{memberId} and follow_status='Y'
	</select>
	
	<!-- 팔로우 요청 -->
	<insert id="requestFollow" parameterType="map">
		 insert into follow(follow_seq,to_id,from_id,follow_date,follow_status)
        values('FOL'||LPAD(follow_seq.nextval,5,0),#{memberId},#{sessionId},sysdate,'N')
	</insert>
	
	<!-- 팔로우 상태 체크 -->
	<select id="checkFollowStatus" parameterType="map" resultType="string">
		select follow_status
        from follow
        where to_id=#{memberId} and from_id=#{sessionId}
	</select>
	
	<!-- 팔로우상태 n으로 만들기 -->
	<update id="changeFollowStatusN" parameterType="String">
		update follow set follow_status='N'
		where follow_seq=#{followSeq}
	</update>
	
	<!-- 알림추가 -->
	<insert id="insertAlarm" parameterType="map">
		insert into alarm(alarm_seq,alarm_to_id,alarm_from_id,alarm_code,alarm_status)
        values('ALA'||LPAD(alarm_seq.nextval,5,0),#{memberId},#{sessionId},#{alarmCode},'Y')
	</insert>	
	
	<!-- 알림 리스트 -->
	<select id="selectAlarms" parameterType="String" resultType="alarm">
		select a.alarm_seq as alarmSeq,f.follow_seq as followSeq,a.alarm_to_id as alarmToId,a.alarm_from_id as alarmFromId,a.alarm_status as alarmStatus,f.follow_status as followStatus,a.alarm_code as alarmCode
		from (select alarm_seq,alarm_to_id,alarm_from_id, alarm_status,alarm_code from alarm where alarm_to_id=#{sessionId} and alarm_status='Y')a full outer join(select to_id,from_id,follow_seq, follow_status from follow where to_id=#{sessionId}) f
       on a.alarm_to_id=f.to_id and a.alarm_from_id=f.from_id
       order by alarm_seq desc
	</select>
	
	<!-- 팔로워 리스트 -->
	<select id="selectFollowerList" parameterType="String" resultType="member">
		select from_id as memberId, follow_status as status, file_saved_name as fileSavedName
		from follow left outer join (select file_saved_name,file_code,file_status from upload_file where file_status='Y')upload_file
		on follow.from_id=upload_file.file_code
		where follow.to_id=#{memberId} and follow_status='Y'
	</select>
	
	<!-- 팔로우 리스트 -->
	<select id="selectFollowList" parameterType="String" resultType="member">
		select to_id as memberId, follow_status as status, file_saved_name as fileSavedName
		from follow left outer join (select file_saved_name,file_code,file_status from upload_file where file_status='Y')upload_file
		on follow.to_id=upload_file.file_code
		where follow.from_id=#{memberId} and follow_status='Y'
	</select>
	
	<!-- 유저 검색 -->
	<select id="searchUser" parameterType="String" resultType="member">
		select member_id as memberId, file_saved_name as fileSavedName
		from(select member_id
   			 from member
    	where member_id like '%'||#{keyword}||'%')m left outer join (select file_code,file_saved_name,file_status from upload_file where file_status='Y')f
		on m.member_id=f.file_code
		where member_id like '%'||#{keyword}||'%'
	</select>
	
	<!-- 팔로워 시퀀스 찾기 -->
	<select id="searchFollowerSeq" parameterType="map" resultType="String">
		select follow_seq
		from follow
		where to_id=#{sessionId} and from_id=#{memberId}
	</select>
	
	<!--팔로우 시퀀스 찾기  -->
	<select id="searchFollowSeq" parameterType="map" resultType="String">
		select follow_seq
		from follow
		where to_id=#{memberId} and from_id=#{sessionId}
	</select>
	<!-- 팔로우 허용 -->
	<update id="acceptFollow" parameterType="String">
		update follow set follow_status='Y',
						follow_date=sysdate
		where follow_seq=#{followSeq}
	</update>
	
	<!-- 팔로우 거절 -->
	<delete id="rejectFollow" parameterType="String">
		delete from follow where follow_seq=#{followSeq}
	</delete>
	
	<!-- 알림 상태변경 -->
	<update id="changeStatusN" parameterType="String">
		update alarm set alarm_status='N'
		where alarm_seq=#{alarmSeq}
	</update>
	
	<!-- 언팔로우하기(팔로우상태==U) -->
	<update id="unFollow" parameterType="String">
		update follow set follow_status='U',
						unfollow_date=sysdate
		where follow_seq=#{followSeq}
	</update>
	
	
	<!-- 아이디 찾기 -->
	<select id="findUserId" parameterType="String" resultType="String">
		SELECT MEMBER_ID as memberId
		FROM MEMBER
		WHERE EMAIL = #{email}
		AND MEMBER_NAME = #{userName}
		AND MEMBER_STATUS = 'Y'
	</select>
	
</mapper>